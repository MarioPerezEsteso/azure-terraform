version: 2

references:

base_image: &base_image
  hashicorp/terraform:light

working_directory: &working_directory
  ~/example

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory
      
terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      cd suscriptions/pre-production/resource-groups
      terraform init
      cd ../../../suscriptions/pre-production/sqlserver
      echo "administrator_login=\"$DB_ADMIN\"" >> secrets.auto.tfvars
      echo "administrator_login_password=\"$DB_PASSWD\"" >> secrets.auto.tfvars
      terraform init
      cd ../../../suscriptions/pre-production/web-applications
      terraform init
apply_job: &apply_job
  <<: *default_config
  steps:
    - *restore_repo
    - *terraform_init
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          cd suscriptions/pre-production/resource-groups
          terraform apply --auto-approve ../../terraform-resource-groups.plan
          cd ../../../suscriptions/pre-production/sqlserver
          terraform apply --auto-approve ../../terraform-sqlserver.plan
          cd ../../../suscriptions/pre-production/web-applications
          terraform apply --auto-approve ../../../terraform-web-applications.plan
jobs:

  build:
    <<: *default_config
    steps:
      - checkout
      - run:
          name: terraform fmt
          command: |
            pwd
            cd suscriptions/pre-production/resource-groups
            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 0 ]; then
              echo "Format of this terraform files is not appropiate:"
              echo
              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .
              echo
              echo "Please run terraform fmt"
              exit 1
            fi
            cd ../../../suscriptions/pre-production/sqlserver
            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 0 ]; then
              echo "Format of this terraform files is not appropiate:"
              echo
              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .
              echo
              echo "Please run terraform fmt"
              exit 1
            fi
            cd ../../../suscriptions/pre-production/web-applications
            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 0 ]; then
              echo "Format of this terraform files is not appropiate:"
              echo
              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .
              echo
              echo "Please run terraform fmt"
              exit 1
            fi
      - *save_repo

  plan:
    <<: *default_config
    steps:
      - *restore_repo
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            cd suscriptions/pre-production/resource-groups
            terraform plan -out=../../../terraform-resource-groups.plan
            cd ../../../suscriptions/pre-production/sqlserver
            terraform plan -out=../../../terraform-sqlserver.plan
            cd ../../../suscriptions/pre-production/web-applications
            terraform plan -out=../../../terraform-web-applications.plan

  apply:
    <<: *apply_job
  apply-with-approval:
    <<: *apply_job

workflows:
  version: 2
  build_plan_approve_apply:
    jobs:
      - build
      - plan:
          requires:
            - build
      - approve:
          type: approval
          requires:
            - plan
          filters:
            branches:
              only: master
      - apply-with-approval:
          requires:
            - approve
          filters:
            branches:
              only: master
      - apply:
          requires:
            - plan
          filters:
            branches:
              only: staging